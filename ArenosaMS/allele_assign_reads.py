import sys
import gzip
from datetime import datetime
import time
import psutil
import pickle

# Input 1: Genes file.
# Contains read IDs assigned to genes by Bowtie.
# Generated by extract_gene_per_read.sh
# Columns 1 and 3 from a 'samtools view' of bam file.
# Stream this file, assumed longer than any parent file.
# Example filename and first line: SxM_BR1_genes.csv
# A00943:178:H52HWDRXY:1:2101:1615:1000,jg9197.t1

# Input 2-? : Parent file(s).
# Files like BR1.mat, BR1.pat, BR2.mat, BR2.pat, ...
# Each file has read IDs assigned to parent by KCloud.
# Load these into RAM, assumed shorter than genes file.
# Example filename and first line: MxS.mat.IDs.txt
# A00943:310:HG7VTDRXY:1:2104:31485:35603

# Output file: min_and_fold.tsv, used by IRP
# Contains three numbers per gene.
# Header and example line:
# MinOneRep	MinOneSamp Fold
# jg8489.t1 1350 8351 394.520833

def load_reads(reads_fn):
    '''Return a presence/absence dict.'''
    reads = dict()
    with gzip.open(reads_fn,'rb') as fin:
        for line in fin:
            line = line.strip()
            parent_read = line  # bytes
            reads[parent_read]=True
    print('Reads loaded:',len(reads.keys()))
    return reads

def process_reads(parent,replicate,read_dict,genes_fn):
    '''
    assume parent's read IDs are in dict
    accumulate statistics while streaming genes file
    '''
    num_reads = len(read_dict.keys())
    num_maps = 0
    with gzip.open(genes_fn,'rb') as fin:
        for line in fin:
            line = line.strip()
            fields = line.split(b',')
            mapped_read = fields[0]
            gene_id = fields[1]
            if mapped_read in read_dict:
                num_maps += 1
                increment(parent,replicate,gene_id)
    print(parent,num_reads,'reads in',num_maps,'reads out')

def increment(parent,replicate,gene_bytes):
    gene_id = gene_bytes.decode("utf-8")
    if gene_id not in ACCOUNTS:
        record = gene_record()
        ACCOUNTS[gene_id] = record
    record = ACCOUNTS[gene_id]
    if len(record.mat_reps)<replicate:
        record.mat_reps.append(0)
    if len(record.pat_reps)<replicate:
        record.pat_reps.append(0)
    if parent=='mat':
        record.mat_reps[replicate-1] += 1
    elif parent=='pat':
        record.pat_reps[replicate-1] += 1
    else:
        raise Exception('Unrecognized parent '+parent)

class gene_record():
    '''Keep count of reads per rep per allele.'''
    def __init__(self):
        self.mat_reps = list() # list of read counts per replicate
        self.pat_reps = list()
    def __str__(self):
        show = '#mat:'+str(self.mat_reps)
        show = show + ' #pat:'+str(self.pat_reps)
        return show

def main(genes_fn,reads_list):
    '''
    initialize data structure for counts
    for each parent file:
        load the parent read IDs
        stream the gene assignments
        accumulate counts in data structure
    compute and output the totals
    '''
    global ACCOUNTS
    ACCOUNTS = dict()
    mat_reps = 0
    pat_reps = 0
    for reads_fn in reads_list:
        print('Processing',reads_fn)
        if 'mat' in reads_fn and 'pat' not in reads_fn:
            parent = 'mat'
            mat_reps += 1
            this_rep = mat_reps
        elif 'pat' in reads_fn and 'mat' not in reads_fn:
            parent = 'pat'
            pat_reps += 1
            this_rep = pat_reps
        else:
            raise Exception('Cannot extract parent from filename '+reads_fn)
        read_dict=load_reads(reads_fn)
        process_reads(parent,this_rep,read_dict,genes_fn)
    if mat_reps != pat_reps:
        print(mat_reps,'biological replicate files, maternal')
        print(pat_reps,'biological replicate files, paternal')
        raise Exception('Replicate imbalance!')
    show_totals()

def show_totals():
    for gene_id in ACCOUNTS.keys():
        record = ACCOUNTS[gene_id]
        print(gene_id, record)

if __name__ == '__main__':
    num_params = len(sys.argv)
    if num_params <= 2 or num_params%2 != 0:
        print('Parameters seen:', sys.argv)
        print('Num parameters seen:',num_params)
        print('Required Parameters: GENES_FILE < MATBR1 PATBR1 >...')
        sys.exit(1)

    print('Get process handle...')
    process = psutil.Process()

    print('Parse argv...')
    SCRIPT_FN = sys.argv[0]
    GENES_FN = sys.argv[1]
    READS_LIST = list()
    for p in range(2,num_params):
        READS_LIST.append(sys.argv[p])

    main(GENES_FN,READS_LIST)

    print(datetime.now(),'now')
    print('Done')
