import sys
import gzip
from datetime import datetime
import time
import psutil
import pickle

# Input 1: Genes file.
# Contains read IDs assigned to genes by Bowtie.
# Read order preserved from original fastq files.
# Generated by extract_gene_per_read.sh
# Columns 1 and 3 from a 'samtools view' of bam file.
# Example filename and first line: SxM_BR1_genes.csv
# A00943:178:H52HWDRXY:1:2101:1615:1000,jg9197.t1

# Input 2-? : Parent file.
# Provide an even number of files ordered like:
# BR1.mat, BR1.pat, BR2.mat, BR2.pat, ...
# Each file has read IDs assigned to parent by KCloud.
# Read order preserved from original fastq files.
# Example filename and first line: MxS.mat.IDs.txt
# A00943:310:HG7VTDRXY:1:2104:31485:35603

# Output file: min_and_fold.tsv, used by IRP
# Contains three numbers per gene.
# Header and example line:
# MinOneRep	MinOneSamp Fold
# jg8489.t1 1350 8351 394.520833

class CountsOneGene():
    '''Keep count of reads per rep per allele.'''
    def __init__(self):
        pass


class TextReader():
    '''Return a line iterator on an open compressed text file.'''
    def __init__(self,filename):
        self.fn = filename
        try:
            self.fin = gzip.open(self.fn,'rb')
        except:
            print("Cannot open", filename)
            sys.exit(1)
    def close(self):
        self.fin.close()
    def __iter__(self):
        return self.fin


def get_read_pair(iter1,iter2):
    '''Read 4 lines from each text file iterator. Load ID and SEQ.'''
    try:
        r1=list()
        id = next(iter1).rstrip()
        id = id.split(b' ')[0] # chop bar code
        r1.append(id[1:]) # chop @ symbol
        r1.append(next(iter1).rstrip()) # nucleotides (bytes)
        next(iter1) # unused
        next(iter1) # quality values
        r2 = list()
        id = next(iter2).rstrip()
        id = id.split(b' ')[0]
        r2.append(id[1:])
        r2.append(next(iter2).rstrip())
        next(iter2)
        next(iter2)
        rp = (r1,r2)
        return rp
    except StopIteration as e:
        return None

def load_genes(parent,stats,genes_fn, reads_fn):
    '''
    assume both files sorted by read ID
    walk both files in tandem
    accumulate statistics per line
    '''
    num_reads,num_maps = 0,0
    maps_reader = TextReader(genes_fn)
    read_reader = TextReader(reads_fn)
    maps_iter = iter(maps_reader)
    read_iter = iter(read_reader)
    mapped_read = None
    parent_read = None
    gene_id = None
    try:
        while True:
            if parent_read is None:
                line = next(read_iter)
                line = line.strip()
                parent_read = str(line)
                num_reads += 1
            if mapped_read is None:
                line = next(maps_iter)
                line = line.strip()
                fields = line.split(b',')
                mapped_read = str(fields[0])
                gene_id = str(fields[1])
            if mapped_read == parent_read:
                num_maps += 1
                print(parent,mapped_read,parent_read,gene_id)
                mapped_read = None
                parent_read = None
            elif mapped_read < parent_read:
                mapped_read = None
                gene_id = None
            elif mapped_read > parent_read:
                parent_read = None
    except StopIteration as e:
        pass
    print(parent,num_reads,'reads in',num_maps,'reads out')

def main(genes_fn,reads_list):
    '''
    initialize data structure for counts
    for each parent file:
        open the genes file
        stream both files in tandem by read ID
        accumulate counts in data structure
    compute and output the totals
    '''
    accounting=dict()
    parents = ('mat','pat')
    toggle = 0
    for reads_fn in reads_list:
        print("Processing", reads_fn)
        parent = parents[toggle]
        load_genes(parent,accounting,genes_fn,reads_fn)
        toggle = (toggle + 1) % 2

if __name__ == '__main__':
    num_params = len(sys.argv)
    if num_params <= 2 or num_params%2 != 0:
        print('Parameters seen:', sys.argv)
        print('Num parameters seen:',num_params)
        print('Required Parameters: GENES_FILE < MATBR1 PATBR1 >...')
        sys.exit(1)

    print('Get process handle...')
    process = psutil.Process()

    print('Parse argv...')
    SCRIPT_FN = sys.argv[0]
    GENES_FN = sys.argv[1]
    READS_LIST = list()
    for p in range(2,num_params):
        READS_LIST.append(sys.argv[p])

    main(GENES_FN,READS_LIST)

    print(datetime.now(),'now')
    print('Done')
